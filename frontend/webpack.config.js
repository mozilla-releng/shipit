const webpack = require('webpack');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const ESLintPlugin = require('eslint-webpack-plugin');
const { CleanWebpackPlugin } = require('clean-webpack-plugin');
const baseConfig = require('./.eslintrc');

const eslintConfig = {
  cache: true,
  cwd: __dirname,
  emitWarning: true,
  failOnError: false,
  formatter: 'codeframe',
  useEslintrc: false,
  baseConfig,
};
const DEFAULT_HOST = 'localhost';
const DEFAULT_PORT = 8010;
const host = process.env.HOST || DEFAULT_HOST;
const port = process.env.PORT || DEFAULT_PORT;
const SHIPIT_PUBLIC_API_URL =
  process.env.SHIPIT_PUBLIC_API_URL || 'https://localhost:8016';
const SHIPIT_API_URL = process.env.SHIPIT_API_URL || 'https://localhost:8015';
const FRONTEND_TASKCLUSTER_ROOT_URL =
  process.env.FRONTEND_TASKCLUSTER_ROOT_URL ||
  'https://firefox-ci-tc.services.mozilla.com';
const DEPLOYMENT_BRANCH = process.env.DEPLOYMENT_BRANCH || 'development';
const connectSrc = [
  'https://hg.mozilla.org',
  'https://hg-edge.mozilla.org',
  'https://auth.mozilla.auth0.com',
  SHIPIT_API_URL,
  SHIPIT_PUBLIC_API_URL,
  FRONTEND_TASKCLUSTER_ROOT_URL,
  "'self'",
].join(' ');

// DO NOT USE DEVTOOLS THAT RELY ON EVAL IN PRODUCTION
// These include tools such as
// 'cheap-module-eval-source-map' and 'react-hot-loader/babel'
module.exports = env => {
  return {
    mode: env,
    devtool: env === 'production' ? false : 'cheap-module-eval-source-map',
    target: 'web',
    context: __dirname,
    stats: {
      children: false,
      entrypoints: false,
      modules: false,
    },
    node: {
      Buffer: false,
      fs: 'empty',
      tls: 'empty',
    },
    output: {
      path: `${__dirname}/build`,
      publicPath: '/',
      filename: 'assets/[name].[contenthash:8].js',
      globalObject: 'this',
    },
    resolve: {
      alias: {
        'react-native': 'react-native-web',
        'react-dom': '@hot-loader/react-dom',
      },
      extensions: [
        '.web.jsx',
        '.web.js',
        '.wasm',
        '.mjs',
        '.jsx',
        '.js',
        '.json',
      ],
    },
    devServer: {
      host,
      port,
      https: true,
      historyApiFallback: {
        disableDotRule: true,
      },
      headers: {
        'Content-Security-Policy':
          `connect-src ${connectSrc}; ` +
          "default-src https://auth.mozilla.auth0.com 'none'; " +
          "script-src 'self' 'unsafe-eval' 'unsafe-inline' https://cdn.auth0.com; " +
          "img-src 'self' https://*.gravatar.com https://i1.wp.com data:; " +
          "style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; " + // Styles are generated by JS, thus require 'unsafe-inline'
          'font-src https://fonts.gstatic.com; ' +
          "frame-ancestors 'none'; " +
          "base-uri 'none'; " +
          "form-action 'none'",
        'X-Frame-Options': 'SAMEORIGIN',
        'X-Content-Type-Options': 'nosniff',
        'X-XSS-Protection': '1; mode=block',
        'Referrer-Policy': 'no-referrer',
        'Strict-Transport-Security':
          'max-age=31536000; includeSubDomains; always;',
      },
    },
    module: {
      rules: [
        {
          test: /\.html$/,
          use: [
            {
              loader: 'html-loader',
              options: {
                attrs: ['img:src', 'link:href'],
              },
            },
          ],
        },
        {
          test: /\.(js|jsx)$/,
          include: [`${__dirname}/src`, `${__dirname}/test`],
          use: [
            {
              loader: 'babel-loader',
              options: {
                cacheDirectory: true,
                babelrc: false,
                configFile: false,
                presets: [
                  [
                    '@babel/preset-env',
                    {
                      debug: false,
                      useBuiltIns: false,
                      shippedProposals: true,
                      targets: {
                        browsers: [
                          'last 2 Chrome versions',
                          'last 2 Firefox versions',
                          'last 2 Edge versions',
                          'last 2 Opera versions',
                          'last 2 Safari versions',
                          'last 2 iOS versions',
                        ],
                      },
                    },
                  ],
                  [
                    '@babel/preset-react',
                    {
                      development: env === 'development',
                      useSpread: true,
                    },
                  ],
                ],
                plugins: [
                  '@babel/plugin-syntax-dynamic-import',
                  [
                    'transform-react-remove-prop-types',
                    {
                      removeImport: true,
                    },
                  ],
                  ...(env === 'development' ? ['react-hot-loader/babel'] : []),
                ],
              },
            },
          ],
        },
        {
          oneOf: [
            {
              test: /\.module\.css$/,
              use: [
                {
                  loader: MiniCssExtractPlugin.loader,
                  options: {
                    esModule: true,
                  },
                },
                {
                  loader: 'css-loader',
                  options: {
                    importLoaders: 0,
                    modules: true,
                  },
                },
              ],
            },
            {
              test: /\.css$/,
              use: [
                {
                  loader: MiniCssExtractPlugin.loader,
                  options: {
                    esModule: true,
                  },
                },
                {
                  loader: 'css-loader',
                  options: {
                    importLoaders: 0,
                  },
                },
              ],
            },
          ],
        },
        {
          test: /\.(eot|ttf|woff|woff2)(\?v=\d+\.\d+\.\d+)?$/,
          use: [
            {
              loader: 'file-loader',
              options: {
                name: 'assets/[name].[hash:8].[ext]',
              },
            },
          ],
        },
        {
          test: /\.(ico|png|jpg|jpeg|gif|svg|webp)(\?v=\d+\.\d+\.\d+)?$/,
          use: [
            {
              loader: 'url-loader',
              options: {
                limit: 8192,
                name: 'assets/[name].[hash:8].[ext]',
                fallback: require.resolve('file-loader'),
              },
            },
          ],
        },
        {
          test: /.worker\.js$/,
          use: [
            {
              loader: 'worker-loader',
            },
          ],
        },
      ],
    },
    optimization: {
      minimize: true,
      splitChunks: {
        chunks: 'all',
        maxInitialRequests: 5,
        name: false,
      },
      runtimeChunk: 'single',
    },
    plugins: [
      new webpack.EnvironmentPlugin({
        HOST: host,
        PORT: port,
        SHIPIT_API_URL,
        SHIPIT_PUBLIC_API_URL,
        DEPLOYMENT_BRANCH,
      }),
      new HtmlWebpackPlugin({
        template: 'src/index.html',
        templateContent: false,
        filename: 'index.html',
        publicPath: 'auto',
        hash: false,
        inject: 'body',
        scriptLoading: 'blocking',
        compile: true,
        favicon: `${__dirname}/src/images/shipit.png`,
        minify: 'auto',
        cache: true,
        showErrors: true,
        chunks: ['index'],
        excludeChunks: [],
        chunksSortMode: 'auto',
        meta: {
          viewport: 'width=device-width, initial-scale=1',
        },
        base: false,
        title: 'Webpack App',
        xhtml: false,
        appMountId: 'root',
        lang: 'en',
      }),
      new MiniCssExtractPlugin({
        filename: 'assets/[name].[contenthash:8].css',
        ignoreOrder: false,
        chunkFilename: 'assets/[name].[contenthash:8].css',
      }),
      new CleanWebpackPlugin({
        dangerouslyAllowCleanPatternsOutsideProject: false,
        dry: false,
        verbose: false,
        cleanStaleWebpackAssets: true,
        protectWebpackAssets: true,
        cleanAfterEveryBuildPatterns: [],
        cleanOnceBeforeBuildPatterns: ['**/*'],
        currentAssets: [],
        initialClean: false,
        outputPath: '',
      }),
      new ESLintPlugin({
        extensions: ['js', 'jsx'],
        files: [`${__dirname}/src`, `${__dirname}/test`],
        ...eslintConfig,
      }),
    ],
    entry: {
      index: [`${__dirname}/src/index`],
    },
  };
};
