version: 1
policy:
  pullRequests: public
tasks:
  $let:
    release_channel:
      $if: 'tasks_for == "github-pull-request"'
      then: 'none'
      else:
        $if: 'tasks_for == "github-push" && event.ref in ["refs/heads/testing", "refs/heads/staging", "refs/heads/production"]'
        then: '${event.ref[11:]}'
        else: 'none'
  in:
    $let:
      python_version: 'py37'
      # Dependabot, and possibly other things creating pull requests
      # can set `user` to something that can't be used in an e-mail
      # address, so we simply make this static to workaround.
      owner_email: 'release+shipit-ci@mozilla.com'
      ui_bucket:
        # The production bucket name doesn't match the branch name,
        # but the other environments do.
        $if: 'release_channel == "production"'
        then: 'relengstatic-prod-shipitfrontend-static-website'
        else: 'relengstatic-${release_channel}-shipitfrontend-static-website'
      shipit_api_url:
        $if: 'release_channel == "production"'
        then: 'https://shipit-api.mozilla-releng.net'
        else:
          $if: 'release_channel == "staging"'
          then: 'https://api.shipit.staging.mozilla-releng.net'
          else:
            $if: 'release_channel == "testing"'
            then: 'https://api.shipit.testing.mozilla-releng.net'
            else: ''
      # Github events have this stuff in different places...
      repo_url:
        $if: 'tasks_for == "github-pull-request"'
        then: '${event.pull_request.head.repo.html_url}'
        else: '${event.repository.html_url}'
      head_sha: {
        $if: 'tasks_for == "github-push"',
        then: '${event.after}',
        else: {
          $if: 'tasks_for == "github-pull-request"',
          then: '${event.pull_request.head.sha}',
          # Assume release event
          else: '${event.release.tag_name}',
        }
      }
      docker_tag:
        $if: 'tasks_for == "github-pull-request"'
        then: 'pull-request'
        else:
          $if: 'tasks_for == "github-push" && event.ref[0:11] == "refs/heads/"'
          then: 'shipit_api_dockerflow_${release_channel}'
          else: 'unknown'
      push_docker_image:
        $if: 'tasks_for == "github-pull-request"'
        then: '0'
        else:
          $if: 'tasks_for == "github-push" && event.ref in ["refs/heads/dev", "refs/heads/testing", "refs/heads/staging", "refs/heads/production"]'
          then: '1'
          else: '0'
      worker_level:
        $if: 'tasks_for == "github-pull-request"'
        then: 't'
        else:
          $if: 'tasks_for == "github-push" && event.ref in ["refs/heads/dev", "refs/heads/testing", "refs/heads/staging", "refs/heads/production"]'
          then: '3'
          else: 't'
    in:
      $flattenDeep:
        - $if: '(tasks_for == "github-pull-request" && event["action"] in ["edited", "opened", "reopened", "synchronize"]) || tasks_for == "github-push"'
          then:
            - $map: [['py37', 'python:3.7'], ['check', 'python:3.7']]
              each(py):
                taskId: "${as_slugid(py[0])}"
                created: {$fromNow: ''}
                deadline: {$fromNow: '2 hours'}
                provisionerId: releng-t
                workerType: linux
                payload:
                  maxRunTime: 1200
                  image: {$eval: 'py[1]'}
                  command:
                    - /bin/bash
                    - -c
                    - >-
                      git clone ${repo_url} shipit &&
                      cd shipit/api &&
                      git checkout ${head_sha} &&
                      pip install tox &&
                      tox -e ${py[0]}
                metadata:
                  name: Ship It API ${py[0]} tests
                  description: Ship It API ${py[0]} tests
                  owner: ${owner_email}
                  source: ${repo_url}

            - taskId: {$eval: as_slugid("ui tests")}
              created: {$fromNow: ''}
              deadline: {$fromNow: '2 hours'}
              provisionerId: releng-t
              workerType: linux
              payload:
                maxRunTime: 1200
                image: node:10
                command:
                  - /bin/bash
                  - -c
                  - >-
                    git clone ${repo_url} shipit &&
                    cd shipit/frontend &&
                    git checkout ${head_sha} &&
                    yarn install &&
                    yarn test
              metadata:
                name: Ship It Frontend tests
                description: Ship It Frontend tests
                owner: ${owner_email}
                source: ${repo_url}

            - taskId: {$eval: as_slugid("docker-build-and-push")}
              dependencies:
                - '${as_slugid(python_version)}'
              created: {$fromNow: ''}
              deadline: {$fromNow: '24 hours'}
              provisionerId: 'releng-${worker_level}'
              workerType: linux
              routes: []
              payload:
                maxRunTime: 3600
                # we need to run really old docker version because taskcluster is using
                # really old version in their setup
                # image: docker:stable
                image: 'docker:1.6.2'
                env:
                  # TODO: update these when we're to push to the real repos
                  DOCKERHUB_EMAIL: 'release+dockerhub+services@mozilla.com'
                  DOCKERHUB_USER: 'mozillarelengservices'
                  DOCKER_REPO: 'mozilla/release-services'
                  DOCKER_TAG: '${docker_tag}'
                  GIT_HEAD_REV: '${head_sha}'
                  PUSH_DOCKER_IMAGE: '${push_docker_image}'
                  REPO_URL: '${repo_url}'
                  SECRET_URL: 'http://taskcluster/secrets/v1/secret/project/releng/shipit/deploy'
                command:
                  - sh
                  - -lxce
                  - >-
                    cd /tmp &&
                    wget ${repo_url}/archive/${head_sha}.tar.gz &&
                    tar zxf ${head_sha}.tar.gz &&
                    find . &&
                    mv shipit-${head_sha} /src &&
                    cd /src/api &&
                    ./docker.d/generate_version_json.sh &&
                    ./docker.d/build_image.sh &&
                    ./docker.d/push_image.sh
                features:
                  dind: true
                  taskclusterProxy: true
              scopes:
                $if: 'push_docker_image == "0"'
                then: []
                else:
                  - 'secrets:get:project/releng/shipit/deploy'
              metadata:
                name: Ship It API docker build
                description: Ship It API docker build
                owner: ${owner_email}
                source: ${repo_url}

            - $if: 'ui_bucket != "relengstatic-none-shipitfrontend-static-website"'
              then:
                - taskId: {$eval: as_slugid("ui-deploy")}
                  created: {$fromNow: ''}
                  deadline: {$fromNow: '2 hours'}
                  provisionerId: 'releng-${worker_level}'
                  workerType: linux
                  scopes:
                    $if: 'push_docker_image == "0"'
                    then: []
                    else:
                      - 'secrets:get:project/releng/shipit/deploy'
                  routes: []
                  payload:
                    env:
                      DEPLOY_SECRET: http://taskcluster/secrets/v1/secret/project/releng/shipit/deploy
                      RELEASE_CHANNEL: ${release_channel}
                      WEBSITE_BUCKET: '${ui_bucket}'
                      SHIPIT_API_URL: '${shipit_api_url}'
                      # To avoid env conditions with TASKCLUSTER_ROOT_URL
                      FRONTEND_TASKCLUSTER_ROOT_URL: 'https://firefox-ci-tc.services.mozilla.com'
                    maxRunTime: 3600
                    image: "node:current"
                    command:
                      - "/bin/bash"
                      - "-c"
                      - "apt-get -q --yes update && apt-get -q --yes install awscli && git clone ${repo_url} shipit && cd shipit/frontend && git checkout ${head_sha} && yarn install && bash ./scripts/deploy"
                    features:
                      taskclusterProxy: true
                  metadata:
                    name: Ship It ${release_channel} ui deploy
                    description: Balrog ${release_channel} ui deploy
                    owner: ${owner_email}
                    source: ${repo_url}
